# compare_full_procedure.ps1 - CREATE OR REPLACE ve / işaretini de dahil eden versiyon

Clear-Host
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "   Prosedur Karsilastirma Final v4" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# Kullanıcı bilgileri
$username = Read-Host "Oracle kullanici"
$password = Read-Host "Oracle sifre"
$database = Read-Host "Database"
$procdir = Read-Host "Prosedur dizini"

# Dosya formatı
Write-Host "`nDosya adi formati:" -ForegroundColor Yellow
Write-Host "1. PROSEDUR.prc" -ForegroundColor Gray
Write-Host "2. SCHEMA.PROSEDUR.prc" -ForegroundColor Gray
$format = Read-Host "Secim (1 veya 2)"
$useSchemaInFilename = ($format -eq "2")

# Karşılaştırma formatı
Write-Host "`nKarsilastirma formati:" -ForegroundColor Yellow
Write-Host "1. Tam karsilastirma (CREATE OR REPLACE dahil)" -ForegroundColor Gray
Write-Host "2. Sadece prosedur govdesi (CREATE OR REPLACE haric)" -ForegroundColor Gray
$compareFormat = Read-Host "Secim (1 veya 2)"
$includeCreateStatement = ($compareFormat -eq "1")

# Liste oku
$procedures = Get-Content "liste.txt"
$total = $procedures.Count

Write-Host "`nToplam $total prosedur kontrol edilecek." -ForegroundColor Yellow
if ($includeCreateStatement) {
    Write-Host "DB'den alinanlara CREATE OR REPLACE eklenecek." -ForegroundColor Cyan
} else {
    Write-Host "Lokal dosyalardan CREATE OR REPLACE cikarilacak." -ForegroundColor Cyan
}
Write-Host ""

# Normalize fonksiyonu
function Normalize-Content {
    param($content, $removeCreateStatement = $false, $removeSlash = $false)
    
    # Satır sonu karakterlerini düzelt
    $normalized = $content -replace "`r`n", "`n" -replace "`r", "`n"
    
    # CREATE OR REPLACE'i çıkar
    if ($removeCreateStatement) {
        # CREATE OR REPLACE PROCEDURE ... satırını bul ve çıkar
        $normalized = $normalized -replace "(?is)^\s*CREATE\s+(OR\s+REPLACE\s+)?", ""
    }
    
    # Son / işaretini çıkar
    if ($removeSlash) {
        $normalized = $normalized -replace "(?m)^\s*/\s*$", ""
    }
    
    # Satır sonundaki boşlukları temizle
    $lines = $normalized -split "`n" | ForEach-Object { $_.TrimEnd() }
    $normalized = $lines -join "`n"
    
    # Başındaki ve sonundaki boşlukları temizle
    $normalized = $normalized.Trim()
    
    return $normalized
}

# Test - ilk prosedürü kontrol
Write-Host "Ilk proseduru test ediyoruz..." -ForegroundColor Yellow
$testLine = Get-Content "liste.txt" | Select-Object -First 1
$testParts = $testLine.Split('.')
$testSchema = $testParts[0]
$testProc = $testParts[1]

Write-Host "Test: $testSchema.$testProc" -ForegroundColor Cyan

# Sonuç değişkenleri
$results = @()
$same = 0
$different = 0
$notfound_db = 0
$notfound_file = 0

$startTime = Get-Date

# Ana döngü
$count = 0
foreach ($line in $procedures) {
    $count++
    
    if ([string]::IsNullOrWhiteSpace($line)) { continue }
    
    $parts = $line.Split('.')
    if ($parts.Count -ne 2) { continue }
    
    $schema = $parts[0].Trim()
    $procname = $parts[1].Trim()
    
    Write-Host "`r[$count/$total] $schema.$procname kontrol ediliyor...                    " -NoNewline
    
    # Dosya adı
    if ($useSchemaInFilename) {
        $fileName = "$schema.$procname.prc"
    } else {
        $fileName = "$procname.prc"
    }
    
    # Lokal dosya bul
    $localFile = $null
    foreach ($variant in @($fileName, $fileName.ToUpper(), $fileName.ToLower())) {
        $testPath = Join-Path $procdir $variant
        if (Test-Path $testPath) {
            $localFile = $testPath
            break
        }
    }
    
    if ($null -eq $localFile) {
        $results += "$schema.$procname - LOKAL DOSYA YOK"
        $notfound_file++
        continue
    }
    
    # SPOOL ile DB'den al
    $spoolFile = "spool_$($procname).txt"
    $sqlContent = @"
SET HEADING OFF
SET FEEDBACK OFF
SET ECHO OFF
SET PAGESIZE 0
SET LINESIZE 32767
SET TRIMSPOOL ON
SET TRIMOUT ON
SET TAB OFF
SET TERMOUT OFF
SET VERIFY OFF
SET SERVEROUTPUT OFF
SET LONG 2000000
SET LONGCHUNKSIZE 2000000
SPOOL $spoolFile
SELECT text FROM all_source 
WHERE owner = UPPER('$schema') 
AND name = UPPER('$procname') 
AND type = 'PROCEDURE'
ORDER BY line;
SPOOL OFF
EXIT;
"@
    
    $sqlFile = "sql_$($procname).sql"
    
    try {
        # SQL dosyasını oluştur ve çalıştır
        $sqlContent | Out-File -FilePath $sqlFile -Encoding ASCII
        & cmd /c "sqlplus -s $username/$password@$database < $sqlFile > nul 2>&1"
        
        # SPOOL dosyası kontrolü
        if (-not (Test-Path $spoolFile) -or (Get-Item $spoolFile).Length -eq 0) {
            $results += "$schema.$procname - DB'DE YOK"
            $notfound_db++
        }
        else {
            # İçerikleri oku
            $dbContent = Get-Content $spoolFile -Raw -ErrorAction SilentlyContinue
            $fileContent = Get-Content $localFile -Raw -ErrorAction SilentlyContinue
            
            if ($null -eq $dbContent) { $dbContent = "" }
            if ($null -eq $fileContent) { $fileContent = "" }
            
            # Karşılaştırma yapılacak içerikleri hazırla
            if ($includeCreateStatement) {
                # DB içeriğine CREATE OR REPLACE ekle
                $dbContentFull = "CREATE OR REPLACE " + $dbContent.Trim() + "`n/"
                $fileContentNorm = Normalize-Content $fileContent
                $dbContentNorm = Normalize-Content $dbContentFull
            } else {
                # Her ikisinden de CREATE OR REPLACE ve / çıkar
                $fileContentNorm = Normalize-Content $fileContent -removeCreateStatement $true -removeSlash $true
                $dbContentNorm = Normalize-Content $dbContent -removeCreateStatement $true -removeSlash $true
            }
            
            # Karşılaştır
            if ($dbContentNorm -eq $fileContentNorm) {
                $same++
            } else {
                $different++
                
                # Debug için ilk 3 farklı prosedürü kaydet
                if ($different -le 3) {
                    # Satır satır farkları göster
                    $dbLines = $dbContentNorm -split "`n"
                    $fileLines = $fileContentNorm -split "`n"
                    
                    $diffInfo = "FARKLI - DB: $($dbLines.Count) satir, Dosya: $($fileLines.Count) satir"
                    
                    # İlk farklı satırı bul
                    $firstDiff = -1
                    for ($i = 0; $i -lt [Math]::Max($dbLines.Count, $fileLines.Count); $i++) {
                        $dbLine = if ($i -lt $dbLines.Count) { $dbLines[$i] } else { "" }
                        $fileLine = if ($i -lt $fileLines.Count) { $fileLines[$i] } else { "" }
                        
                        if ($dbLine -ne $fileLine) {
                            $firstDiff = $i + 1
                            break
                        }
                    }
                    
                    if ($firstDiff -gt 0) {
                        $diffInfo += ", ilk fark satir $firstDiff"
                    }
                    
                    $results += "$schema.$procname - $diffInfo"
                    
                    # Debug dosyaları
                    $dbContentNorm | Out-File "debug_db_$($different)_$procname.txt" -Encoding UTF8
                    $fileContentNorm | Out-File "debug_file_$($different)_$procname.txt" -Encoding UTF8
                } else {
                    $results += "$schema.$procname - FARKLI"
                }
            }
        }
    }
    catch {
        $results += "$schema.$procname - HATA: $_"
    }
    finally {
        # Temizlik
        Remove-Item $sqlFile, $spoolFile -Force -ErrorAction SilentlyContinue
    }
}

Write-Host "`r                                                                                "

$endTime = Get-Date
$duration = ($endTime - $startTime).TotalSeconds

# Rapor
$report = @"
Prosedur Karsilastirma Raporu
Tarih: $(Get-Date -Format "dd.MM.yyyy HH:mm:ss")
Sure: $duration saniye
Format: $(if($includeCreateStatement){'CREATE OR REPLACE dahil'}else{'Sadece prosedur govdesi'})
=============================

FARKLI/SORUNLU PROSEDURLER:
---------------------------
$($results -join "`n")

===== OZET =====
Toplam: $total
Ayni: $same
Farkli: $different
DB'de Yok: $notfound_db
Lokal Dosya Yok: $notfound_file
================
"@

$report | Out-File -FilePath "fark.txt" -Encoding UTF8

# Özet
Write-Host ""
Write-Host "====================================" -ForegroundColor Green
Write-Host "          OZET RAPOR" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host "Toplam: $total"
Write-Host "Ayni: $same" -ForegroundColor Green
Write-Host "Farkli: $different" -ForegroundColor Red
Write-Host "DB'de Yok: $notfound_db" -ForegroundColor Yellow
Write-Host "Lokal Dosya Yok: $notfound_file" -ForegroundColor Yellow
Write-Host "Sure: $duration saniye" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Green

if ($different -gt 0) {
    Write-Host "`nNOT:" -ForegroundColor Yellow
    if ($includeCreateStatement) {
        Write-Host "DB'den gelen prosedur govdesine CREATE OR REPLACE eklendi." -ForegroundColor Gray
        Write-Host "Eger hala fark varsa, prosedur parametreleri veya" -ForegroundColor Gray
        Write-Host "AS/IS kullaniminda fark olabilir." -ForegroundColor Gray
    } else {
        Write-Host "Sadece prosedur govdeleri karsilastirildi." -ForegroundColor Gray
        Write-Host "CREATE OR REPLACE ve / isaretleri yoksayildi." -ForegroundColor Gray
    }
    
    Write-Host "`nIlk 3 farkli prosedur icin debug dosyalari olusturuldu." -ForegroundColor Yellow
}

Read-Host "`nEnter'a basin"
