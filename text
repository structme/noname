# compare_with_schema.ps1 - Dosya adında şema desteği

Clear-Host
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "   Prosedur Karsilastirma" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# Kullanıcı bilgileri
$username = Read-Host "Oracle kullanici"
$password = Read-Host "Oracle sifre"
$database = Read-Host "Database"
$procdir = Read-Host "Prosedur dizini"

# Dosya adı formatını sor
Write-Host "`nDosya adi formati:" -ForegroundColor Yellow
Write-Host "1. PROSEDUR.prc (sadece prosedur adi)" -ForegroundColor Gray
Write-Host "2. SCHEMA.PROSEDUR.prc (schema + prosedur adi)" -ForegroundColor Gray
$format = Read-Host "Secim (1 veya 2)"

$useSchemaInFilename = ($format -eq "2")

# Dizin kontrolü
if (-not (Test-Path $procdir)) {
    Write-Host "`nHATA: Dizin bulunamadi: $procdir" -ForegroundColor Red
    Read-Host "Enter'a basin"
    exit
}

# Dizindeki dosyaları göster
Write-Host "`nDizindeki ilk 10 .prc dosyasi:" -ForegroundColor Yellow
Get-ChildItem -Path $procdir -Filter "*.prc" | Select-Object -First 10 | ForEach-Object {
    Write-Host "  - $($_.Name)" -ForegroundColor DarkGray
}

# Export SQL
@"
SET HEADING OFF
SET FEEDBACK OFF
SET PAGESIZE 0
SET LINESIZE 32767
SET TRIMSPOOL ON
SET TERMOUT OFF
SET LONG 1000000
SELECT text FROM all_source WHERE owner = UPPER('&1') AND name = UPPER('&2') AND type = 'PROCEDURE' ORDER BY line;
EXIT;
"@ | Out-File -FilePath "exp.sql" -Encoding ASCII

# Liste oku
$procedures = Get-Content "liste.txt"
$total = $procedures.Count

Write-Host "`nToplam $total prosedur kontrol edilecek." -ForegroundColor Yellow
Write-Host "Dosya formati: $(if($useSchemaInFilename){'SCHEMA.PROSEDUR.prc'}else{'PROSEDUR.prc'})" -ForegroundColor Cyan
Write-Host ""

# Sonuç listeleri
$farkList = @()
$same = 0
$different = 0
$notfound_db = 0
$notfound_file = 0

# Test - ilk 3 dosyayı kontrol et
Write-Host "Ilk 3 dosya kontrolu:" -ForegroundColor Magenta
$testCount = 0
foreach ($line in $procedures) {
    $testCount++
    if ($testCount -gt 3) { break }
    
    $parts = $line.Split('.')
    if ($parts.Count -eq 2) {
        $schema = $parts[0]
        $procname = $parts[1]
        
        # Dosya adını oluştur
        if ($useSchemaInFilename) {
            $fileName = "$schema.$procname.prc"
        } else {
            $fileName = "$procname.prc"
        }
        
        $localFile = Join-Path $procdir $fileName
        
        Write-Host "  $line -> Aranan: $fileName" -NoNewline
        if (Test-Path $localFile) {
            Write-Host " [BULUNDU]" -ForegroundColor Green
        } else {
            Write-Host " [BULUNAMADI]" -ForegroundColor Red
        }
    }
}

$continue = Read-Host "`nDevam edilsin mi? (E/H)"
if ($continue -ne 'E' -and $continue -ne 'e') { exit }

Write-Host "`nKarsilastirma basliyor..." -ForegroundColor Yellow

# Ana döngü
$count = 0
$startTime = Get-Date

foreach ($line in $procedures) {
    $count++
    
    if ([string]::IsNullOrWhiteSpace($line)) { continue }
    
    $parts = $line.Split('.')
    if ($parts.Count -ne 2) { continue }
    
    $schema = $parts[0].Trim()
    $procname = $parts[1].Trim()
    
    # İlerleme
    Write-Host "`r[$count/$total] $schema.$procname kontrol ediliyor...                    " -NoNewline
    
    # Dosya adını belirle
    if ($useSchemaInFilename) {
        # SCHEMA.PROSEDUR.prc formatı
        $possibleFiles = @(
            "$schema.$procname.prc",
            "$($schema.ToUpper()).$($procname.ToUpper()).prc",
            "$($schema.ToLower()).$($procname.ToLower()).prc"
        )
    } else {
        # Sadece PROSEDUR.prc formatı
        $possibleFiles = @(
            "$procname.prc",
            "$($procname.ToUpper()).prc",
            "$($procname.ToLower()).prc"
        )
    }
    
    # Dosyayı bul
    $localFile = $null
    foreach ($fileName in $possibleFiles) {
        $testPath = Join-Path $procdir $fileName
        if (Test-Path $testPath) {
            $localFile = $testPath
            break
        }
    }
    
    # Lokal dosya kontrolü
    if ($null -eq $localFile) {
        $farkList += "$schema.$procname - LOKAL DOSYA YOK"
        $notfound_file++
        continue
    }
    
    # DB'den export et
    try {
        $tempFile = "temp_$procname.prc"
        
        # SQLPlus çalıştır
        $process = Start-Process -FilePath "sqlplus" `
            -ArgumentList "-s", "$username/$password@$database", "@exp.sql", $schema, $procname `
            -NoNewWindow -Wait -RedirectStandardOutput $tempFile -PassThru
        
        # DB kontrolü
        if ((Get-Item $tempFile -ErrorAction SilentlyContinue).Length -eq 0) {
            $farkList += "$schema.$procname - DB'DE YOK"
            $notfound_db++
        }
        else {
            # İçerik karşılaştır
            $dbContent = Get-Content $tempFile -Raw
            $fileContent = Get-Content $localFile -Raw
            
            # Normalize et
            $dbContent = $dbContent -replace "`r`n", "`n" -replace "`r", "`n"
            $fileContent = $fileContent -replace "`r`n", "`n" -replace "`r", "`n"
            
            if ($dbContent.Trim() -ne $fileContent.Trim()) {
                $dbSize = $dbContent.Length
                $fileSize = $fileContent.Length
                $farkList += "$schema.$procname - FARKLI (DB: $dbSize, Dosya: $fileSize)"
                $different++
            } else {
                $same++
            }
        }
        
        Remove-Item $tempFile -Force -ErrorAction SilentlyContinue
    }
    catch {
        $farkList += "$schema.$procname - HATA: $_"
    }
}

Write-Host "`r                                                                                "

$endTime = Get-Date
$duration = ($endTime - $startTime).TotalSeconds

# Rapor
@"
Prosedur Karsilastirma Raporu
Tarih: $(Get-Date -Format "dd.MM.yyyy HH:mm:ss")
Dizin: $procdir
Dosya Formati: $(if($useSchemaInFilename){'SCHEMA.PROSEDUR.prc'}else{'PROSEDUR.prc'})
Sure: $duration saniye
=============================

$($farkList -join "`n")

===== OZET =====
Toplam: $total
Ayni: $same
Farkli: $different
DB'de Yok: $notfound_db
Lokal Dosya Yok: $notfound_file
"@ | Out-File -FilePath "fark.txt" -Encoding UTF8

# Temizlik
Remove-Item "exp.sql" -Force -ErrorAction SilentlyContinue

# Özet
Write-Host ""
Write-Host "====================================" -ForegroundColor Green
Write-Host "          OZET RAPOR" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host "Toplam: $total"
Write-Host "Ayni: $same" -ForegroundColor Green
Write-Host "Farkli: $different" -ForegroundColor Red
Write-Host "DB'de Yok: $notfound_db" -ForegroundColor Yellow
Write-Host "Lokal Dosya Yok: $notfound_file" -ForegroundColor Yellow
Write-Host "Sure: $duration saniye" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Green

if ($farkList.Count -gt 0) {
    Write-Host "`nDetaylar 'fark.txt' dosyasina kaydedildi." -ForegroundColor Yellow
    
    $open = Read-Host "`nFark.txt'yi acmak ister misiniz? (E/H)"
    if ($open -eq 'E' -or $open -eq 'e') {
        Start-Process notepad.exe fark.txt
    }
}

Read-Host "`nCikmak icin Enter'a basin"
