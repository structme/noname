# compare_procedures_parallel.ps1
# Paralel çalışan, hem DB hem lokal kontrol yapan script

Clear-Host
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "   Paralel Prosedur Karsilastirma" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# Kullanıcı bilgilerini al
$username = Read-Host "Oracle kullanici"
$password = Read-Host "Oracle sifre" -AsSecureString
$password = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($password))
$database = Read-Host "Database"
$procdir = Read-Host "Prosedur dizini"
$parallel = Read-Host "Paralel thread sayisi (varsayilan: 10)"

if ([string]::IsNullOrWhiteSpace($parallel)) { $parallel = 10 }

# Liste.txt'yi oku
$procedures = Get-Content "liste.txt"
$total = $procedures.Count

Write-Host ""
Write-Host "Toplam $total prosedur kontrol edilecek." -ForegroundColor Yellow
Write-Host "$parallel paralel thread ile calisacak." -ForegroundColor Yellow
Write-Host ""

# Export SQL oluştur
$exportSQL = @"
SET HEADING OFF
SET FEEDBACK OFF
SET PAGESIZE 0
SET LINESIZE 32767
SET TRIMSPOOL ON
SET TERMOUT OFF
SET LONG 1000000
SET LONGCHUNKSIZE 32767
SELECT text FROM all_source WHERE owner = UPPER('&1') AND name = UPPER('&2') AND type = 'PROCEDURE' ORDER BY line;
EXIT;
"@

$exportSQL | Out-File -FilePath "exp.sql" -Encoding ASCII

# Thread-safe koleksiyonlar
$results = [System.Collections.Concurrent.ConcurrentBag[PSObject]]::new()
$progressCounter = [System.Collections.Concurrent.ConcurrentDictionary[string,int]]::new()
$progressCounter["processed"] = 0
$progressCounter["same"] = 0
$progressCounter["different"] = 0
$progressCounter["notfound_db"] = 0
$progressCounter["notfound_file"] = 0
$progressCounter["notfound_both"] = 0

# Progress gösterme job'ı
$progressJob = Start-Job -ScriptBlock {
    param($total)
    while ($true) {
        $processed = $using:progressCounter["processed"]
        $same = $using:progressCounter["same"]
        $different = $using:progressCounter["different"]
        $notfound_db = $using:progressCounter["notfound_db"]
        $notfound_file = $using:progressCounter["notfound_file"]
        $notfound_both = $using:progressCounter["notfound_both"]
        
        if ($processed -gt 0) {
            $percent = [math]::Round(($processed / $total) * 100)
            $status = "[$processed/$total] %$percent | Ayni: $same | Farkli: $different | Sadece DB: $notfound_file | Sadece Lokal: $notfound_db | Hic Yok: $notfound_both"
            Write-Host "`r$status" -NoNewline
        }
        
        if ($processed -eq $total) { break }
        Start-Sleep -Milliseconds 100
    }
} -ArgumentList $total

# Ana işlem - Paralel
$startTime = Get-Date

$procedures | ForEach-Object -Parallel {
    $line = $_
    $parts = $line.Split('.')
    
    if ($parts.Count -ne 2) { 
        $using:results.Add([PSCustomObject]@{
            Schema = "HATA"
            Procedure = $line
            Status = "YANLIS_FORMAT"
            Details = "Satir formati SCHEMA.PROCEDURE olmali"
        })
        $using:progressCounter["processed"]++
        return
    }
    
    $schema = $parts[0]
    $procname = $parts[1]
    $localFile = "$using:procdir\$procname.prc"
    $tempFile = "temp_$procname`_$([guid]::NewGuid().ToString('N').Substring(0,8)).prc"
    
    try {
        # DB'den export et
        $exportResult = & sqlplus -s "$using:username/$using:password@$using:database" @exp.sql $schema $procname 2>$null
        $exportResult | Out-File -FilePath $tempFile -Encoding ASCII
        
        # DB kontrolü - dosya boş mu?
        $tempFileInfo = Get-Item $tempFile -ErrorAction SilentlyContinue
        $dbExists = $tempFileInfo -and $tempFileInfo.Length -gt 0
        
        # Lokal dosya kontrolü
        $localExists = Test-Path $localFile
        
        # Durum belirleme
        if (-not $dbExists -and -not $localExists) {
            $status = "HIC_YOK"
            $details = "Hem DB'de hem lokalde yok"
            $using:progressCounter["notfound_both"]++
        }
        elseif (-not $dbExists) {
            $status = "SADECE_LOKAL"
            $details = "DB'de yok, sadece lokalde var"
            $using:progressCounter["notfound_db"]++
        }
        elseif (-not $localExists) {
            $status = "SADECE_DB"
            $details = "Lokalde yok, sadece DB'de var"
            $using:progressCounter["notfound_file"]++
        }
        else {
            # Her ikisi de var, karşılaştır
            $dbContent = Get-Content $tempFile -Raw
            $fileContent = Get-Content $localFile -Raw
            
            # Satır sonu farklarını normalize et
            $dbContent = $dbContent -replace "`r`n", "`n" -replace "`r", "`n"
            $fileContent = $fileContent -replace "`r`n", "`n" -replace "`r", "`n"
            
            if ($dbContent.Trim() -eq $fileContent.Trim()) {
                $status = "AYNI"
                $details = "Icerikler birebir ayni"
                $using:progressCounter["same"]++
            }
            else {
                $status = "FARKLI"
                $dbSize = $dbContent.Length
                $fileSize = $fileContent.Length
                $details = "DB: $dbSize byte, Lokal: $fileSize byte"
                $using:progressCounter["different"]++
            }
        }
        
        # Sonucu ekle
        $using:results.Add([PSCustomObject]@{
            Schema = $schema
            Procedure = $procname
            Status = $status
            Details = $details
        })
    }
    catch {
        $using:results.Add([PSCustomObject]@{
            Schema = $schema
            Procedure = $procname
            Status = "HATA"
            Details = $_.Exception.Message
        })
    }
    finally {
        # Temp dosyayı sil
        if (Test-Path $tempFile) {
            Remove-Item $tempFile -Force -ErrorAction SilentlyContinue
        }
        $using:progressCounter["processed"]++
    }
} -ThrottleLimit $parallel

# Progress job'ını bekle
Wait-Job $progressJob | Out-Null
Remove-Job $progressJob

$endTime = Get-Date
$duration = $endTime - $startTime

Write-Host "`n`n"

# Sonuçları grupla
$grouped = $results.ToArray() | Group-Object Status

# Fark.txt oluştur
$farkContent = @"
Paralel Prosedur Karsilastirma Raporu
Tarih: $(Get-Date -Format "dd.MM.yyyy HH:mm:ss")
Toplam Sure: $($duration.TotalSeconds) saniye
Thread Sayisi: $parallel
=====================================

"@

# Kategorilere göre listele
$categories = @(
    @{Name="FARKLI OLANLAR"; Status="FARKLI"; Color="Red"},
    @{Name="SADECE DB'DE OLANLAR"; Status="SADECE_DB"; Color="Yellow"},
    @{Name="SADECE LOKALDE OLANLAR"; Status="SADECE_LOKAL"; Color="Yellow"},
    @{Name="HIC BULUNMAYANLAR"; Status="HIC_YOK"; Color="DarkRed"},
    @{Name="HATALI OLANLAR"; Status="HATA"; Color="Magenta"}
)

foreach ($category in $categories) {
    $items = $results.ToArray() | Where-Object { $_.Status -eq $category.Status } | Sort-Object Schema, Procedure
    if ($items) {
        $farkContent += "`n$($category.Name):`n"
        $farkContent += "=" * $category.Name.Length + "`n"
        foreach ($item in $items) {
            $farkContent += "$($item.Schema).$($item.Procedure) - $($item.Details)`n"
        }
    }
}

# Özet ekle
$farkContent += @"

===== OZET =====
Toplam: $total
Ayni: $($progressCounter["same"])
Farkli: $($progressCounter["different"])
Sadece DB'de: $($progressCounter["notfound_file"])
Sadece Lokalde: $($progressCounter["notfound_db"])
Hic Yok: $($progressCounter["notfound_both"])
Sure: $($duration.TotalSeconds) saniye
Thread: $parallel
"@

$farkContent | Out-File -FilePath "fark.txt" -Encoding UTF8

# Temizlik
Remove-Item "exp.sql" -Force -ErrorAction SilentlyContinue

# Özet rapor
Write-Host "====================================" -ForegroundColor Green
Write-Host "          OZET RAPOR" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host "Toplam kontrol edilen: $total"
Write-Host "Ayni olan: $($progressCounter["same"])" -ForegroundColor Green
Write-Host "Farkli olan: $($progressCounter["different"])" -ForegroundColor Red
Write-Host "Sadece DB'de: $($progressCounter["notfound_file"])" -ForegroundColor Yellow
Write-Host "Sadece Lokalde: $($progressCounter["notfound_db"])" -ForegroundColor Yellow
Write-Host "Hic bulunamayan: $($progressCounter["notfound_both"])" -ForegroundColor DarkRed
Write-Host "====================================" -ForegroundColor Green
Write-Host "Toplam sure: $($duration.TotalSeconds) saniye" -ForegroundColor Cyan
Write-Host "Thread sayisi: $parallel" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Green

# Detaylı gösterim
foreach ($category in $categories) {
    $items = $results.ToArray() | Where-Object { $_.Status -eq $category.Status } | Sort-Object Schema, Procedure
    if ($items) {
        Write-Host "`n$($category.Name):" -ForegroundColor $category.Color
        Write-Host ("-" * $category.Name.Length)
        $items | Select-Object -First 5 | ForEach-Object {
            Write-Host "$($_.Schema).$($_.Procedure)" -ForegroundColor $category.Color
        }
        if ($items.Count -gt 5) {
            Write-Host "... ve $($items.Count - 5) tane daha" -ForegroundColor Gray
        }
    }
}

Write-Host "`nTum detaylar 'fark.txt' dosyasina kaydedildi." -ForegroundColor Yellow

# Excel raporu oluştur (opsiyonel)
$excelData = $results.ToArray() | Select-Object Schema, Procedure, Status, Details
$excelData | Export-Csv -Path "karsilastirma_raporu.csv" -NoTypeInformation -Encoding UTF8

Write-Host "Excel raporu 'karsilastirma_raporu.csv' olarak kaydedildi." -ForegroundColor Yellow

Write-Host ""
Read-Host "Devam etmek icin Enter'a basin"

# Fark.txt'yi aç
if ($progressCounter["different"] -gt 0 -or $progressCounter["notfound_file"] -gt 0 -or $progressCounter["notfound_db"] -gt 0) {
    $openFile = Read-Host "Fark.txt dosyasini acmak ister misiniz? (E/H)"
    if ($openFile -eq 'E' -or $openFile -eq 'e') {
        Start-Process notepad.exe fark.txt
    }
}
