# compare_simple_fixed.ps1 - @ işareti düzeltilmiş versiyon

Clear-Host
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "   Prosedur Karsilastirma" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# Kullanıcı bilgileri
$username = Read-Host "Oracle kullanici"
$password = Read-Host "Oracle sifre"
$database = Read-Host "Database"
$procdir = Read-Host "Prosedur dizini"

# Export SQL dosyası oluştur
$sqlContent = @"
SET HEADING OFF
SET FEEDBACK OFF
SET PAGESIZE 0
SET LINESIZE 32767
SET TRIMSPOOL ON
SET TERMOUT OFF
SET LONG 1000000
SET LONGCHUNKSIZE 32767
SELECT text FROM all_source WHERE owner = UPPER('&1') AND name = UPPER('&2') AND type = 'PROCEDURE' ORDER BY line;
EXIT;
"@

$sqlContent | Out-File -FilePath "exp.sql" -Encoding ASCII

# Liste oku
if (-not (Test-Path "liste.txt")) {
    Write-Host "HATA: liste.txt dosyasi bulunamadi!" -ForegroundColor Red
    Read-Host "Cikmak icin Enter"
    exit
}

$procedures = Get-Content "liste.txt"
$total = $procedures.Count

Write-Host "`nToplam $total prosedur kontrol edilecek." -ForegroundColor Yellow
Write-Host ""

# Sonuç listeleri
$farkList = @()
$same = 0
$different = 0
$notfound_db = 0
$notfound_file = 0
$errors = 0

# Başlangıç zamanı
$startTime = Get-Date

# Ana döngü
$count = 0
foreach ($line in $procedures) {
    $count++
    
    # Boş satırları atla
    if ([string]::IsNullOrWhiteSpace($line)) { continue }
    
    $parts = $line.Split('.')
    
    if ($parts.Count -ne 2) { 
        Write-Host "HATA: Yanlis format - $line" -ForegroundColor Red
        $errors++
        continue 
    }
    
    $schema = $parts[0].Trim()
    $procname = $parts[1].Trim()
    
    # İlerleme göster
    $percent = [math]::Round(($count / $total) * 100)
    Write-Host "`r[$count/$total] %$percent - $schema.$procname kontrol ediliyor...                    " -NoNewline
    
    $localFile = Join-Path $procdir "$procname.prc"
    
    # Lokal dosya var mı?
    if (-not (Test-Path $localFile)) {
        $farkList += "$schema.$procname - LOKAL DOSYA YOK"
        $notfound_file++
        continue
    }
    
    # SQLPlus çalıştır - @ işaretini doğru kullan
    $tempFile = "temp_$procname.prc"
    
    try {
        # SQLPlus komutunu oluştur
        $sqlplusCmd = "sqlplus"
        $sqlplusArgs = @(
            "-s",
            "$username/$password@$database",
            "@exp.sql",
            $schema,
            $procname
        )
        
        # Process başlat ve çıktıyı yakala
        $pinfo = New-Object System.Diagnostics.ProcessStartInfo
        $pinfo.FileName = $sqlplusCmd
        $pinfo.Arguments = $sqlplusArgs -join " "
        $pinfo.RedirectStandardOutput = $true
        $pinfo.RedirectStandardError = $true
        $pinfo.UseShellExecute = $false
        $pinfo.CreateNoWindow = $true
        
        $process = New-Object System.Diagnostics.Process
        $process.StartInfo = $pinfo
        [void]$process.Start()
        
        $output = $process.StandardOutput.ReadToEnd()
        $process.WaitForExit()
        
        # Çıktıyı dosyaya yaz
        $output | Out-File -FilePath $tempFile -Encoding ASCII
        
        # DB'de var mı kontrol
        if ((Get-Item $tempFile -ErrorAction SilentlyContinue).Length -eq 0) {
            $farkList += "$schema.$procname - DB'DE YOK"
            $notfound_db++
        }
        else {
            # İçerik karşılaştır
            $dbContent = Get-Content $tempFile -Raw
            $fileContent = Get-Content $localFile -Raw
            
            # Satır sonu karakterlerini normalize et
            $dbContent = $dbContent -replace "`r`n", "`n" -replace "`r", "`n"
            $fileContent = $fileContent -replace "`r`n", "`n" -replace "`r", "`n"
            
            if ($dbContent.Trim() -ne $fileContent.Trim()) {
                $dbSize = $dbContent.Length
                $fileSize = $fileContent.Length
                $farkList += "$schema.$procname - FARKLI (DB: $dbSize byte, Lokal: $fileSize byte)"
                $different++
            } else {
                $same++
            }
        }
    }
    catch {
        Write-Host "`nHATA: $schema.$procname - $_" -ForegroundColor Red
        $farkList += "$schema.$procname - HATA: $_"
        $errors++
    }
    finally {
        # Temp dosyayı sil
        if (Test-Path $tempFile) {
            Remove-Item $tempFile -Force -ErrorAction SilentlyContinue
        }
    }
}

# Son satırı temizle
Write-Host "`r                                                                                "

$endTime = Get-Date
$duration = ($endTime - $startTime).TotalSeconds

# Rapor oluştur
$reportContent = @"
Prosedur Karsilastirma Raporu
Tarih: $(Get-Date -Format "dd.MM.yyyy HH:mm:ss")
Sure: $duration saniye
=============================

FARKLI/SORUNLU PROSEDURLER:
---------------------------
$($farkList -join "`n")

===== OZET =====
Toplam: $total
Ayni: $same
Farkli: $different
DB'de Yok: $notfound_db
Lokal Dosya Yok: $notfound_file
Hata: $errors
================
"@

$reportContent | Out-File -FilePath "fark.txt" -Encoding UTF8

# CSV raporu
$csvData = @()
foreach ($item in $farkList) {
    if ($item -match "^(.+?)\.(.+?) - (.+)$") {
        $csvData += [PSCustomObject]@{
            Schema = $matches[1]
            Procedure = $matches[2]
            Status = $matches[3]
        }
    }
}
$csvData | Export-Csv -Path "karsilastirma_raporu.csv" -NoTypeInformation -Encoding UTF8

# Temizlik
if (Test-Path "exp.sql") {
    Remove-Item "exp.sql" -Force -ErrorAction SilentlyContinue
}

# Özet göster
Write-Host ""
Write-Host "====================================" -ForegroundColor Green
Write-Host "          OZET RAPOR" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host "Toplam: $total"
Write-Host "Ayni: $same" -ForegroundColor Green
Write-Host "Farkli: $different" -ForegroundColor Red
Write-Host "DB'de Yok: $notfound_db" -ForegroundColor Yellow
Write-Host "Lokal Dosya Yok: $notfound_file" -ForegroundColor Yellow
Write-Host "Hata: $errors" -ForegroundColor Magenta
Write-Host "Sure: $duration saniye" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Green

if ($farkList.Count -gt 0) {
    Write-Host "`nFarkli/sorunlu prosedurler 'fark.txt' dosyasina kaydedildi." -ForegroundColor Yellow
    Write-Host "CSV raporu 'karsilastirma_raporu.csv' olarak kaydedildi." -ForegroundColor Yellow
    
    $open = Read-Host "`nFark.txt'yi acmak ister misiniz? (E/H)"
    if ($open -eq 'E' -or $open -eq 'e') {
        Start-Process notepad.exe fark.txt
    }
} else {
    Write-Host "`nTum prosedurler ayni!" -ForegroundColor Green
}

Write-Host ""
Read-Host "Cikmak icin Enter'a basin"
