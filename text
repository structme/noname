# path_test_compare.ps1 - Yol kontrolü eklenmiş versiyon

Clear-Host
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "   Prosedur Karsilastirma" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# Kullanıcı bilgileri
$username = Read-Host "Oracle kullanici"
$password = Read-Host "Oracle sifre"
$database = Read-Host "Database"

# Prosedür dizini - örneklerle
Write-Host "`nProsedur dizini ornekleri:" -ForegroundColor Yellow
Write-Host "  C:\prosedurler" -ForegroundColor Gray
Write-Host "  C:\Users\kullanici\Desktop\prosedurler" -ForegroundColor Gray
Write-Host "  \\sunucu\paylasim\prosedurler" -ForegroundColor Gray
Write-Host "  ." -ForegroundColor Gray -NoNewline
Write-Host " (mevcut dizin)" -ForegroundColor DarkGray

$procdir = Read-Host "`nProsedur dizini"

# Dizin kontrolü
if (-not (Test-Path $procdir)) {
    Write-Host "`nHATA: Belirtilen dizin bulunamadi!" -ForegroundColor Red
    Write-Host "Girilen yol: $procdir" -ForegroundColor Yellow
    
    # Alternatif yollar dene
    $alternativePaths = @(
        $procdir,
        (Join-Path $PWD $procdir),
        (Join-Path $env:USERPROFILE $procdir),
        (Join-Path "C:\" $procdir)
    )
    
    Write-Host "`nAlternatif yollar deneniyor..." -ForegroundColor Yellow
    foreach ($altPath in $alternativePaths) {
        if (Test-Path $altPath) {
            Write-Host "Bulundu: $altPath" -ForegroundColor Green
            $procdir = $altPath
            break
        }
    }
    
    if (-not (Test-Path $procdir)) {
        Write-Host "`nDizin bulunamadi. Cikilyor..." -ForegroundColor Red
        Read-Host "Enter'a basin"
        exit
    }
}

# Dizin bilgilerini göster
Write-Host "`nKullanilacak dizin: $procdir" -ForegroundColor Green
$prcFiles = Get-ChildItem -Path $procdir -Filter "*.prc" -ErrorAction SilentlyContinue
Write-Host "Dizinde bulunan .prc dosya sayisi: $($prcFiles.Count)" -ForegroundColor Cyan

if ($prcFiles.Count -gt 0) {
    Write-Host "Ilk 5 dosya:" -ForegroundColor Gray
    $prcFiles | Select-Object -First 5 | ForEach-Object {
        Write-Host "  - $($_.Name)" -ForegroundColor DarkGray
    }
}

# Liste.txt'den örnek göster
if (Test-Path "liste.txt") {
    Write-Host "`nliste.txt'den ilk 5 satir:" -ForegroundColor Yellow
    Get-Content "liste.txt" | Select-Object -First 5 | ForEach-Object {
        $parts = $_.Split('.')
        if ($parts.Count -eq 2) {
            $testFile = Join-Path $procdir "$($parts[1]).prc"
            if (Test-Path $testFile) {
                Write-Host "  $_" -ForegroundColor Green -NoNewline
                Write-Host " [DOSYA VAR]" -ForegroundColor DarkGreen
            } else {
                Write-Host "  $_" -ForegroundColor Red -NoNewline
                Write-Host " [DOSYA YOK: $testFile]" -ForegroundColor DarkRed
            }
        }
    }
}

$continue = Read-Host "`nDevam etmek istiyor musunuz? (E/H)"
if ($continue -ne 'E' -and $continue -ne 'e') {
    exit
}

# Export SQL
@"
SET HEADING OFF
SET FEEDBACK OFF
SET PAGESIZE 0
SET LINESIZE 32767
SET TRIMSPOOL ON
SET TERMOUT OFF
SET LONG 1000000
SELECT text FROM all_source WHERE owner = UPPER('&1') AND name = UPPER('&2') AND type = 'PROCEDURE' ORDER BY line;
EXIT;
"@ | Out-File -FilePath "exp.sql" -Encoding ASCII

# Liste oku
$procedures = Get-Content "liste.txt"
$total = $procedures.Count

Write-Host "`nToplam $total prosedur kontrol edilecek." -ForegroundColor Yellow
Write-Host ""

# Debug modu
$debug = Read-Host "Debug modu acilsin mi? (E/H)"
$debugMode = ($debug -eq 'E' -or $debug -eq 'e')

# Sonuç listeleri
$farkList = @()
$same = 0
$different = 0
$notfound_db = 0
$notfound_file = 0

# Ana döngü
$count = 0
foreach ($line in $procedures) {
    $count++
    
    if ([string]::IsNullOrWhiteSpace($line)) { continue }
    
    $parts = $line.Split('.')
    if ($parts.Count -ne 2) { continue }
    
    $schema = $parts[0].Trim()
    $procname = $parts[1].Trim()
    
    # Dosya yolunu oluştur
    $localFile = Join-Path $procdir "$procname.prc"
    
    if ($debugMode -and $count -le 5) {
        Write-Host "`nDEBUG: Kontrol ediliyor: $schema.$procname" -ForegroundColor Magenta
        Write-Host "  Aranan dosya: $localFile" -ForegroundColor DarkMagenta
        Write-Host "  Dosya var mi: $(Test-Path $localFile)" -ForegroundColor DarkMagenta
    }
    
    # İlerleme
    if (-not $debugMode) {
        Write-Host "`r[$count/$total] $schema.$procname kontrol ediliyor...                    " -NoNewline
    }
    
    # Lokal dosya kontrolü
    if (-not (Test-Path $localFile)) {
        $farkList += "$schema.$procname - LOKAL DOSYA YOK [$localFile]"
        $notfound_file++
        
        # Alternatif isimler dene
        $altNames = @(
            "$procname.prc",
            "$procname.PRC",
            "$($procname.ToLower()).prc",
            "$($procname.ToUpper()).prc",
            "$schema.$procname.prc"
        )
        
        $found = $false
        foreach ($altName in $altNames) {
            $altPath = Join-Path $procdir $altName
            if (Test-Path $altPath) {
                if ($debugMode) {
                    Write-Host "  ALTERNATIF BULUNDU: $altPath" -ForegroundColor Yellow
                }
                $localFile = $altPath
                $found = $true
                break
            }
        }
        
        if (-not $found) {
            continue
        }
    }
    
    # DB'den export et
    try {
        $tempFile = "temp_$procname.prc"
        
        # SQLPlus çalıştır
        $process = Start-Process -FilePath "sqlplus" `
            -ArgumentList "-s", "$username/$password@$database", "@exp.sql", $schema, $procname `
            -NoNewWindow -Wait -RedirectStandardOutput $tempFile -PassThru
        
        # DB kontrolü
        if ((Get-Item $tempFile -ErrorAction SilentlyContinue).Length -eq 0) {
            $farkList += "$schema.$procname - DB'DE YOK"
            $notfound_db++
        }
        else {
            # İçerik karşılaştır
            $dbContent = Get-Content $tempFile -Raw
            $fileContent = Get-Content $localFile -Raw
            
            # Normalize et
            $dbContent = $dbContent -replace "`r`n", "`n" -replace "`r", "`n"
            $fileContent = $fileContent -replace "`r`n", "`n" -replace "`r", "`n"
            
            if ($dbContent.Trim() -ne $fileContent.Trim()) {
                $farkList += "$schema.$procname - FARKLI"
                $different++
            } else {
                $same++
            }
        }
        
        Remove-Item $tempFile -Force -ErrorAction SilentlyContinue
    }
    catch {
        $farkList += "$schema.$procname - HATA: $_"
    }
}

Write-Host "`r                                                                                "

# Rapor
@"
Prosedur Karsilastirma Raporu
Tarih: $(Get-Date -Format "dd.MM.yyyy HH:mm:ss")
Dizin: $procdir
=============================

$($farkList -join "`n")

===== OZET =====
Toplam: $total
Ayni: $same
Farkli: $different
DB'de Yok: $notfound_db
Lokal Dosya Yok: $notfound_file
"@ | Out-File -FilePath "fark.txt" -Encoding UTF8

# Temizlik
Remove-Item "exp.sql" -Force -ErrorAction SilentlyContinue

# Özet
Write-Host ""
Write-Host "====================================" -ForegroundColor Green
Write-Host "          OZET RAPOR" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host "Dizin: $procdir" -ForegroundColor Cyan
Write-Host "Toplam: $total"
Write-Host "Ayni: $same" -ForegroundColor Green
Write-Host "Farkli: $different" -ForegroundColor Red
Write-Host "DB'de Yok: $notfound_db" -ForegroundColor Yellow
Write-Host "Lokal Dosya Yok: $notfound_file" -ForegroundColor Yellow
Write-Host "====================================" -ForegroundColor Green

# Lokal dosya yoksa detaylı bilgi ver
if ($notfound_file -gt 0) {
    Write-Host "`nLOKAL DOSYA BULUNAMAYANLARIN DETAYI:" -ForegroundColor Red
    $farkList | Where-Object { $_ -like "*LOKAL DOSYA YOK*" } | Select-Object -First 10 | ForEach-Object {
        Write-Host "  $_" -ForegroundColor DarkRed
    }
    
    Write-Host "`nDosya isimlendirme kontrolu:" -ForegroundColor Yellow
    Write-Host "- Dosyalar .prc uzantili mi?" -ForegroundColor Gray
    Write-Host "- Buyuk/kucuk harf uyumu var mi?" -ForegroundColor Gray
    Write-Host "- Dosya adinda schema yok, sadece prosedur adi olmali" -ForegroundColor Gray
}

Read-Host "`nEnter'a basin"
