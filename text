# compare_spool.ps1 - SPOOL yöntemi ile tam içerik alma

Clear-Host
Write-Host "====================================" -ForegroundColor Cyan
Write-Host "   Prosedur Karsilastirma (SPOOL)" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Cyan
Write-Host ""

# Kullanıcı bilgileri
$username = Read-Host "Oracle kullanici"
$password = Read-Host "Oracle sifre"
$database = Read-Host "Database"
$procdir = Read-Host "Prosedur dizini"

# Dosya formatı
Write-Host "`nDosya adi formati:" -ForegroundColor Yellow
Write-Host "1. PROSEDUR.prc" -ForegroundColor Gray
Write-Host "2. SCHEMA.PROSEDUR.prc" -ForegroundColor Gray
$format = Read-Host "Secim (1 veya 2)"
$useSchemaInFilename = ($format -eq "2")

# İlk prosedürü test et
Write-Host "`nOnce bir test yapalim..." -ForegroundColor Yellow
$testLine = Get-Content "liste.txt" | Select-Object -First 1
$testParts = $testLine.Split('.')
$testSchema = $testParts[0]
$testProc = $testParts[1]

Write-Host "Test proseduru: $testSchema.$testProc" -ForegroundColor Cyan

# Test SQL - satır sayısı
@"
SET HEADING OFF
SET FEEDBACK OFF
SELECT 'Satir sayisi: ' || COUNT(*) FROM all_source 
WHERE owner = UPPER('$testSchema') 
AND name = UPPER('$testProc') 
AND type = 'PROCEDURE';
EXIT;
"@ | Out-File -FilePath "test_count.sql" -Encoding ASCII

$countResult = & cmd /c "sqlplus -s $username/$password@$database < test_count.sql 2>&1"
Write-Host $countResult -ForegroundColor Yellow

# Test - SPOOL ile export
@"
SET HEADING OFF
SET FEEDBACK OFF
SET ECHO OFF
SET PAGESIZE 0
SET LINESIZE 32767
SET TRIMSPOOL ON
SET TRIMOUT ON
SET TAB OFF
SET TERMOUT OFF
SET VERIFY OFF
SET SERVEROUTPUT OFF
SET LONG 2000000
SET LONGCHUNKSIZE 2000000
SPOOL test_spool.txt
SELECT text FROM all_source 
WHERE owner = UPPER('$testSchema') 
AND name = UPPER('$testProc') 
AND type = 'PROCEDURE'
ORDER BY line;
SPOOL OFF
EXIT;
"@ | Out-File -FilePath "test_spool.sql" -Encoding ASCII

Write-Host "SPOOL ile export deneniyor..." -ForegroundColor Gray
& cmd /c "sqlplus -s $username/$password@$database < test_spool.sql > nul 2>&1"

if (Test-Path "test_spool.txt") {
    $spoolSize = (Get-Item "test_spool.txt").Length
    Write-Host "SPOOL dosya boyutu: $spoolSize byte" -ForegroundColor Green
    
    # Lokal dosya ile karşılaştır
    if ($useSchemaInFilename) {
        $testFileName = "$testSchema.$testProc.prc"
    } else {
        $testFileName = "$testProc.prc"
    }
    $testLocalFile = Join-Path $procdir $testFileName
    
    if (Test-Path $testLocalFile) {
        $localSize = (Get-Item $testLocalFile).Length
        Write-Host "Lokal dosya boyutu: $localSize byte" -ForegroundColor Green
        Write-Host "Fark: $([Math]::Abs($spoolSize - $localSize)) byte" -ForegroundColor $(if([Math]::Abs($spoolSize - $localSize) -lt 100){"Green"}else{"Red"})
    }
}

$continue = Read-Host "`nDevam edilsin mi? (E/H)"
if ($continue -ne 'E' -and $continue -ne 'e') { 
    Remove-Item "test_*.sql", "test_*.txt" -Force -ErrorAction SilentlyContinue
    exit 
}

# Temizlik
Remove-Item "test_*.sql", "test_*.txt" -Force -ErrorAction SilentlyContinue

Write-Host "`nKarsilastirma basliyor..." -ForegroundColor Yellow

# Liste oku
$procedures = Get-Content "liste.txt"
$total = $procedures.Count

# Sonuç değişkenleri
$results = @()
$same = 0
$different = 0
$notfound_db = 0
$notfound_file = 0

$startTime = Get-Date

# Ana döngü
$count = 0
foreach ($line in $procedures) {
    $count++
    
    if ([string]::IsNullOrWhiteSpace($line)) { continue }
    
    $parts = $line.Split('.')
    if ($parts.Count -ne 2) { continue }
    
    $schema = $parts[0].Trim()
    $procname = $parts[1].Trim()
    
    Write-Host "`r[$count/$total] $schema.$procname kontrol ediliyor...                    " -NoNewline
    
    # Dosya adı
    if ($useSchemaInFilename) {
        $fileName = "$schema.$procname.prc"
    } else {
        $fileName = "$procname.prc"
    }
    
    # Lokal dosya bul
    $localFile = $null
    foreach ($variant in @($fileName, $fileName.ToUpper(), $fileName.ToLower())) {
        $testPath = Join-Path $procdir $variant
        if (Test-Path $testPath) {
            $localFile = $testPath
            break
        }
    }
    
    if ($null -eq $localFile) {
        $results += "$schema.$procname - LOKAL DOSYA YOK"
        $notfound_file++
        continue
    }
    
    # SPOOL SQL dosyası
    $spoolFile = "spool_$($procname).txt"
    $sqlContent = @"
SET HEADING OFF
SET FEEDBACK OFF
SET ECHO OFF
SET PAGESIZE 0
SET LINESIZE 32767
SET TRIMSPOOL ON
SET TRIMOUT ON
SET TAB OFF
SET TERMOUT OFF
SET VERIFY OFF
SET SERVEROUTPUT OFF
SET LONG 2000000
SET LONGCHUNKSIZE 2000000
COLUMN text FORMAT A32767
SPOOL $spoolFile
SELECT text FROM all_source 
WHERE owner = UPPER('$schema') 
AND name = UPPER('$procname') 
AND type = 'PROCEDURE'
ORDER BY line;
SPOOL OFF
EXIT;
"@
    
    $sqlFile = "sql_$($procname).sql"
    
    try {
        # SQL dosyasını oluştur
        $sqlContent | Out-File -FilePath $sqlFile -Encoding ASCII
        
        # SQLPlus çalıştır
        $cmdCommand = "sqlplus -s $username/$password@$database < $sqlFile > nul 2>&1"
        & cmd /c $cmdCommand
        
        # SPOOL dosyası kontrolü
        if (-not (Test-Path $spoolFile) -or (Get-Item $spoolFile).Length -eq 0) {
            # Satır sayısını kontrol et
            $checkSql = @"
SET HEADING OFF
SET FEEDBACK OFF
SELECT COUNT(*) FROM all_source 
WHERE owner = UPPER('$schema') AND name = UPPER('$procname') AND type = 'PROCEDURE';
EXIT;
"@
            $checkSql | Out-File -FilePath "check_temp.sql" -Encoding ASCII
            $checkResult = & cmd /c "sqlplus -s $username/$password@$database < check_temp.sql 2>&1"
            Remove-Item "check_temp.sql" -Force -ErrorAction SilentlyContinue
            
            if ($checkResult -match "^\s*0\s*$") {
                $results += "$schema.$procname - DB'DE YOK"
                $notfound_db++
            } else {
                $results += "$schema.$procname - EXPORT HATASI"
            }
        }
        else {
            # İçerik oku ve karşılaştır
            $dbContent = Get-Content $spoolFile -Raw -ErrorAction SilentlyContinue
            $fileContent = Get-Content $localFile -Raw -ErrorAction SilentlyContinue
            
            if ($null -eq $dbContent) { $dbContent = "" }
            if ($null -eq $fileContent) { $fileContent = "" }
            
            # Normalize fonksiyonu
            function Normalize-Text {
                param($text)
                # SPOOL'un eklediği boş satırları temizle
                $text = $text -replace "^\s*`n", ""
                $text = $text -replace "`n\s*$", ""
                # Satır sonlarını normalize et
                $text = $text -replace "`r`n", "`n" -replace "`r", "`n"
                # Satır sonundaki boşlukları temizle
                $lines = $text -split "`n" | ForEach-Object { $_.TrimEnd() }
                $text = $lines -join "`n"
                # Birden fazla boş satırı tek satıra indir
                $text = $text -replace "`n`n+", "`n`n"
                return $text.Trim()
            }
            
            $dbNorm = Normalize-Text $dbContent
            $fileNorm = Normalize-Text $fileContent
            
            if ($dbNorm -eq $fileNorm) {
                $same++
            } else {
                # Satır satır karşılaştır
                $dbLines = $dbNorm -split "`n"
                $fileLines = $fileNorm -split "`n"
                
                $diffInfo = "FARKLI - DB: $($dbContent.Length) byte ($($dbLines.Count) satir), " +
                           "Dosya: $($fileContent.Length) byte ($($fileLines.Count) satir)"
                
                $results += "$schema.$procname - $diffInfo"
                $different++
                
                # Debug için ilk birkaç farklı prosedürü sakla
                if ($different -le 3) {
                    $dbNorm | Out-File "debug_db_$($different)_$procname.txt" -Encoding UTF8
                    $fileNorm | Out-File "debug_file_$($different)_$procname.txt" -Encoding UTF8
                }
            }
        }
    }
    catch {
        $results += "$schema.$procname - HATA: $_"
    }
    finally {
        # Temizlik
        Remove-Item $sqlFile, $spoolFile -Force -ErrorAction SilentlyContinue
    }
}

Write-Host "`r                                                                                "

$endTime = Get-Date
$duration = ($endTime - $startTime).TotalSeconds

# Rapor
$report = @"
Prosedur Karsilastirma Raporu (SPOOL Method)
Tarih: $(Get-Date -Format "dd.MM.yyyy HH:mm:ss")
Sure: $duration saniye
=============================

FARKLI/SORUNLU PROSEDURLER:
---------------------------
$($results -join "`n")

===== OZET =====
Toplam: $total
Ayni: $same
Farkli: $different
DB'de Yok: $notfound_db
Lokal Dosya Yok: $notfound_file
================
"@

$report | Out-File -FilePath "fark.txt" -Encoding UTF8

# Özet
Write-Host ""
Write-Host "====================================" -ForegroundColor Green
Write-Host "          OZET RAPOR" -ForegroundColor Green
Write-Host "====================================" -ForegroundColor Green
Write-Host "Toplam: $total"
Write-Host "Ayni: $same" -ForegroundColor Green
Write-Host "Farkli: $different" -ForegroundColor Red
Write-Host "DB'de Yok: $notfound_db" -ForegroundColor Yellow
Write-Host "Lokal Dosya Yok: $notfound_file" -ForegroundColor Yellow
Write-Host "Sure: $duration saniye" -ForegroundColor Cyan
Write-Host "====================================" -ForegroundColor Green

if ($different -gt 0) {
    Write-Host "`nIlk 3 farkli prosedur icin debug dosyalari olusturuldu." -ForegroundColor Yellow
    Write-Host "Karsilastirmak icin:" -ForegroundColor Gray
    Write-Host "- debug_db_1_*.txt vs debug_file_1_*.txt" -ForegroundColor DarkGray
}

Read-Host "`nEnter'a basin"
